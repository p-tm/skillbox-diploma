"""
–ü–∞—Ä—Å–µ—Ä html-—Ñ–∞–π–ª–∞ —Å —Ö–µ–ª–ø–æ–º

"""
import re

from dataclasses import dataclass
from typing import Callable, Iterable, List

@dataclass
class HelpParser:

    _raw: str           # —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ html-—Ñ–∞–π–ª–∞
    _src: str           # —Å–æ–¥–µ–∂—Ä–∞–Ω–∏–µ html-—Ñ–∞–π–ª–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

    def __init__(self, src_file: str):

        with open(src_file, mode='r', encoding='utf-8') as f:
            tmp: str = f.read()

        self._raw = tmp
        self._src = re.sub(r'\n *', ' ', tmp, flags=re.DOTALL)

    def get_main_page(self):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        :return: —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram) —Ö–µ–ª–ø–∞

        """
        page: str = self.between_tags(self._src, '<div class="main_page">', '</div>').__next__()
        return self.get_page_content(page)


    def get_next_page(self, cmd: str):
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥

        :return: —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram) —Ö–µ–ª–ø–∞

        """
        page: str = self.between_tags(self._src, '<div class="{} cmd".*?>'.format(cmd), '</div>').__next__()
        return self.get_page_content(page)

    def get_page_content(self, page: str):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è - –ø–∞—Ä—Å–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã

        :param page: –∫—É—Å–æ–∫ html-—Ñ–∞–π–ª–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        :return: –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –¥–ª—è —á–∞—Ç–∞ Telegram
        """
        hdr_naked: str = self.between_tags(page, '<p class="header.*?">', '</p>').__next__()
        header: str = '<b>{}</b>\n'.format(hdr_naked)
        subheader: str = self.between_tags(page, '<p class="subheader">', '</p>').__next__()
        add_bullet: Callable = lambda x: ('üîπ ' + x) if x else ''
        body: List = [add_bullet(piece) for piece in self.between_tags(page, '<li>', '</li>')]
        footers: List = [piece for piece in self.between_tags(page, '<p class="footer">', '</p>')]
        return '{}{}\n{}{}'.format(header, subheader, ''.join(body), '\n'.join(footers))

    def between_tags(self, src: str, tb: str, te: str) -> Iterable[str]:
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –∫—É—Å–æ–∫ —Ç–µ—Å–∫—Ç–∞ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏
        (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–≤–∞ html-—Ç—ç–≥–∞

        :param src: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        :param tb: –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–µ–≥
        :param te: –∫–æ–Ω–µ—á–Ω—ã–π —Ç–µ–≥
        :return: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

        """
        template = r'{}(.*?){}'.format(tb, te)
        tmp_list: List = re.findall(template, src, flags=re.DOTALL)
        if not tmp_list:
            yield ''
        for piece in re.findall(template, src, flags=re.DOTALL):
            res: str = piece.rstrip().lstrip()
            # –æ–±—Ä–µ–∑–∞–µ–º –≤—Å–µ —Ç—ç–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç Telegram
            res = re.sub(r'<a.*?>', '', res, flags=re.DOTALL)
            res = re.sub(r'</a>', '', res, flags=re.DOTALL)
            yield '{}\n'.format(res)

    def get_help_buttons(self):
        """
        –í—ã–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ä—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ —Ñ–∞–π–ª–µ

        """
        template = r'<div class="(.*) cmd'
        return re.findall(template, self._raw)



